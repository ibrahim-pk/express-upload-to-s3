#[Used that code for typescript]

# name: Deploy to EC2

# on:
#   push:
#     branches: ['main']
#   pull_request:
#     branches: ['main']

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install Node Js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 20.15
#       - name: Install Dependencies
#         run: yarn install --frozen-lockfile
#       - name: Build App
#         run: yarn build

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install Node Js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 20.15
#       - name: Configure SSH
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
#         run: |
#           mkdir -p ~/.ssh
#           echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
#       - name: Deploy to EC2
#         env:
#           EC2_HOST: ${{ secrets.EC2_HOST }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#         run: |
#           # Create deployment directory
#           ssh $EC2_USER@$EC2_HOST "mkdir -p ~/app"

#           # Copy files to EC2
#           rsync -avz \
#             --exclude='.git' \
#             --exclude='node_modules' \
#             --exclude='.github' \
#             . $EC2_USER@$EC2_HOST:~/app/

#           # Install production dependencies on EC2
#           ssh $EC2_USER@$EC2_HOST "cd ~/app && export PATH=$PATH:/run/user/1000/fnm_multishells/112424_1734077954807/bin && yarn install --frozen-lockfile"

#           # Stop existing PM2 process if it exists
#           ssh $EC2_USER@$EC2_HOST "export PATH=$PATH:/run/user/1000/fnm_multishells/112424_1734077954807/bin && pm2 delete nodejs-app || true"

#           # Start the application with PM2
#           ssh $EC2_USER@$EC2_HOST "export PATH=$PATH:/run/user/1000/fnm_multishells/112424_1734077954807/bin && cd ~/app && pm2 start dist/server.js --name nodejs-app"




name: Deploy to EC2

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.15

      - name: Install Dependencies
        run: npm install

      - name: Build App (if needed)
        run: |
          if [ -f package.json ] && grep -q '"build":' package.json; then
            npm run build
          else
            echo "No build script found. Skipping."
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.15

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          # Upload project files to EC2
          ssh $EC2_USER@$EC2_HOST "mkdir -p ~/app"
          
          rsync -avz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            . $EC2_USER@$EC2_HOST:~/app/

          # Upload ENV_FILE content using base64 to preserve newlines and special characters
          echo "$ENV_FILE" | base64 > encoded_env.b64
          scp encoded_env.b64 $EC2_USER@$EC2_HOST:~/app/
          ssh $EC2_USER@$EC2_HOST "base64 -d ~/app/encoded_env.b64 > ~/app/.env && rm ~/app/encoded_env.b64" 

          # Install production dependencies and restart app using PM2
          ssh $EC2_USER@$EC2_HOST << 'EOF'
            cd ~/app
            npm install --production

            # Stop existing app if running
            pm2 delete nodejs-app || true

            # Start the app
            pm2 start index.js --name nodejs-app
          EOF

